table(bwlabel(distmap(ab)))
ab <- aa>0.74
display(ab)
table(bwlabel(ab))
display(watershed(ab))
ab <- aa>0.7
display(watershed(ab))
display(ab)
ab <- aa>0.65
display(ab)
ab <- aa>0.5
display(ab)
ab <- aa>0.3
display(ab)
ab <- aa>0.4
display(ab)
ab <- aa>0.5
display(ab)
display(watershed(ab))
ab <- aa>0.2
display(watershed(ab))
display(ab)
ab <- aa>0.25
display(ab)
ab <- aa>0.3
display(ab)
ab <- aa>0.35
display(ab)
ab <- aa>0.4
display(ab)
table(bwlabel(ab))
display( colorLabels(bwlabel(ab)) )
display( colorLabels(bwlabel(normalize(ab))))
nmask = watershed( distmap(ab))
display(colorLabels(nmask))
nmask = watershed( distmap(ab),10)
display(colorLabels(nmask))
nmask = watershed( distmap(ab),20)
display(colorLabels(nmask))
nmask = watershed( distmap(ab),10)
display(colorLabels(nmask))
ab <- aa>0.5
nmask = watershed( distmap(ab),10)
display(colorLabels(nmask))
display(ab)
ab <- aa>0.7
display(ab)
ab <- aa>0.6
display(ab)
nmask = watershed( distmap(ab),10)
display(colorLabels(nmask))
nmask = watershed( distmap(ab),20)
display(colorLabels(nmask))
display(fillHull(ab))
rgblogo = toRGB(ab)
points = rbind(c(50, 50), c(100, 50), c(150, 50))
colors = c("red", "green", "blue")
rgblogo = floodFill(rgblogo, points, colors)
display( rgblogo )
b <- fillHull(ab)
display(b)
nmask = watershed( distmap(b))
display(colorLabels(nmask))
nmask = watershed( distmap(b),20)
display(colorLabels(nmask))
nmask = watershed( distmap(b),30)
display(colorLabels(nmask))
nmask = watershed( distmap(b),50)
display(colorLabels(nmask))
b <- fillHull(ab)
display(b)
ab <- aa>0.6
display(ab)
ab <- aa>0.4
display(ab)
b <- fillHull(ab)
display(b)
ab <- aa>0.5
b <- fillHull(ab)
display(b)
ab <- aa>0.7
b <- fillHull(ab)
display(b)
ab <- aa<0.5
display(ab)
b <- fillHull(ab)
display(b)
b <- fillHull(aa)
display(b)
ab <- aa<0.7
display(ab)
b <- fillHull(aa)
display(b)
b <- fillHull(ab)
display(b)
ab <- aa<0.6
b <- fillHull(ab)
ab <- aa<0.6
display(b)
ab <- aa<0.3
ab <- aa<0.4
display(b)
ab <- aa<0.6
ab <- aa<0.3
b <- fillHull(ab)
display(b)
display(ab)
ab <- aa<0.4
display(b)
b <- fillHull(ab)
display(b)
highlight(ab)
highlight(aa)
highlight(aa)
highlight(a)
plot(irgb)
highlight(a)
plot(irgb)
highlight(a>0.7)
plot(irgb)
highlight(a>0.5)
p <- 1/(1+a)
plot(p)
bg <- (!threshold(a,"10%"))
fg <- (threshold(a,"90%"))
imlist(fg,bg) %>% plot(layout="row")
seed <- bg+2*fg
plot(seed)
ws <- (watershed(seed,p)==1)
plot(ws)
plot(p)
aa <- a %>% enorm
plot(aa)
p <- 1/(1+aa)
plot(p)
ws <- (watershed(seed,p)==1)
coins <- load.example(coins)
coins <- load.example("coins")
irgb <- coins
plot(irgb)
igrey <- grayscale(irgb)
gr <- imgradient(igrey)
a <- irgb
for(i in 1:length(gr$x[,1]))
{
a[i,]=evalfis(cbind(gr$x[i,],gr$y[i,]),fis)
print(i)
}
plot(a)
plot(a>0.6)
plot(a<0.6)
aa <- a<0.6
plot(fillHull(aaa))
plot(fillHull(aa))
plot(fillHull(a))
aa <- a<0.5
plot(fillHull(a))
plot(fillHull(aa))
aa <- a<0.7
plot(fillHull(aa))
aa <- a<0.75
plot(fillHull(aa))
plot(coins)
highlight(aa)
plot(coins)
highlight(fillHull(aa))
aa <- a<0.76
highlight(fillHull(aa))
aa <- a<0.7
highlight(fillHull(aa))
plot(coins)
highlight(fillHull(aa))
nmask = watershed(aa )
plot(colorLabels(fillHull(aa)))
plot(fillHull(aa))
aa <- a<0.76
plot(fillHull(aa))
aa <- a<0.7
plot(fillHull(aa))
aa <- a<0.755
plot(fillHull(aa))
aa <- a<0.75
aa <- a<0.75
plot(fillHull(aa))
aa <- a<0.74
aa <- a<0.74
plot(fillHull(aa))
aa <- a<0.73
plot(fillHull(aa))
aa <- a<0.72
plot(fillHull(aa))
aa <- a<0.73
plot(fillHull(aa))
table(bwlabel(fillHull(aa)))
l <- bwlabel(fillHull(aa))
display(colorLabels(l))
plot(colorLabels(l))
aa <- a<0.7
aa <- a<0.73
label <- bwlabel(fillHull(aa))
display(colorLabels(label))
plot(colorLabels(label))
aa <- a<0.73
label <- bwlabel(fillHull(aa))
plot(colorLabels(label))
plot(coins)
plot(colorLabels(label))
plot(coins,main="Original")
plot(colorLabels(label),main="Segmented")
layout(t(1:2))
plot(coins,main="Original")
plot(colorLabels(label),main="Segmented")
layout(t(1:2))
plot(irgb,main="Original")
plot(colorLabels(label),main="Segmented")
a <- irgb
for(i in 1:length(gr$x[,1]))
{
a[i,]=evalfis(cbind(gr$x[i,],gr$y[i,]),fis)
print(i)
}
aa <- a<0.73
label <- bwlabel(fillHull(aa))
layout(t(1:2))
plot(irgb,main="Original")
plot(colorLabels(label),main="Segmented")
layout(t(1:2))
plot(irgb,main="Original",axes=F)
plot(colorLabels(label),main="Segmented")
plot(irgb)
plot(irgb[,,1,1],main="Original",axes=F)
plot(irgb[,1,1],main="Original",axes=F)
plot(irgb[,,1],main="Original",axes=F)
plot(irgb>0,main="Original",axes=F)
layout(t(1:2))
plot(irgb>0,main="Original",axes=F)
plot(colorLabels(label),main="Segmented")
plot(colorLabels(label),main="Segmented")
layout(t(1:2))
plot(irgb>0,axes=F)
plot(colorLabels(label))
layout(t(1:2))
plot(irgb[irgb>0],axes=F)
plot(colorLabels(label))
layout(t(1:2))
plot(irgb,axes=F)
plot(colorLabels(label))
plot(colorLabels(label))
layout(t(1:2))
plot(irgb,axes=F)
plot(colorLabels(label))
layout(t(1:3))
plot(irgb,axes=F)
plot(aa)
plot(colorLabels(label))
layout(t(1:3))
plot(irgb,axes=F)
plot(aa,axes=F)
plot(colorLabels(label))
plot(irgb,axes=F,legend=F)
plot(irgb,axes=F)
plot(aa,axes=F)
plot(irgb)
plot(Image(irgb))
layout(t(1:3))
plot(Image(irgb),axes=F)
plot(Image(aa),axes=F)
plot(colorLabels(label))
layout(t(1:3))
plot(Image(irgb))
plot(Image(aa))
plot(colorLabels(label))
layout(t(1:3))
plot(Image(irgb))
plot(Image(colorLabels(label)))
plot(Image(aa))
layout(t(1:3))
plot(Image(irgb))
plot(Image(aa))
plot(Image(colorLabels(label)))
image(aa)
display(Image(aa))
display(Image(aa),main="sd")
library(ggplot2)
qplot(Image(a))
qplot(Image(aa))
qplot(aa)
plot(Image(irgb),sub="sfd")
plot(Image(irgb))
par(main="sjdkf")
plot(Image(irgb))
plot(Image(irgb))
plot(Image(irgb))
plot(Image(irgb),label="sdf")
text(x = 20, y = 20, label = "Parrots", adj = c(0,1), col = "orange", cex = 2)
dev.print(irgb,"Original.jpg")
save.image(irgb,"irgb.jpg")
layout(t(1:3))
plot(Image(irgb))
plot(Image(aa))
plot(Image(colorLabels(label)))
save.image(Image(aa),"FuzzyEdge")
save.image(aa,"FuzzyEdge")
writeImage(Image(aa),"FuzzyEdge.jpg")
writeImage(Image(colorLabels(label)),"Segmented Output")
writeImage(Image(colorLabels(label)),"Segmented Output.jpg")
library(imager)
library(FuzzyR)
library(EBImage)
i <- readImage("105276016-GettyImages-976548522.530x298.jpg")
irgb <- load.image("105276016-GettyImages-976548522.530x298.jpg")
igrey <- grayscale(irgb)
gr <- imgradient(igrey)
fis <- newfis("EdgeDetector")
fis <- addvar(fis,"input","gr$x",c(-1,1))
fis <- addvar(fis,"input","gr$y",c(-1,1))
fis <- addmf(fis,"input",1,"gaussx","gaussmf",c(0.1,0))
fis <- addmf(fis,"input",2,"gaussy","gaussmf",c(0.1,0))
fis <- addvar(fis,"output","res",c(0,1))
fis <- addmf(fis,"output",1,"white","trimf",c(0.3,1,1))
fis <- addmf(fis,"output",1,"black","trimf",c(0,0,0.7))
fis <- addrule(fis,c(1,1,1,1,1))
fis <- addrule(fis,c(-1,-1,2,1,2))
a <- irgb
for(i in 1:length(gr$x[,1]))
{
a[i,]=evalfis(cbind(gr$x[i,],gr$y[i,]),fis)
print(i)
}
irgb <- load.image("105276016-GettyImages-976548522.530x298.jpg")
igrey <- grayscale(irgb)
gr <- imgradient(igrey)
fis <- newfis("EdgeDetector")
fis <- addvar(fis,"input","gr$x",c(-1,1))
fis <- addvar(fis,"input","gr$y",c(-1,1))
fis <- addmf(fis,"input",1,"gaussx","gaussmf",c(0.1,0))
fis <- addmf(fis,"input",2,"gaussy","gaussmf",c(0.1,0))
fis <- addvar(fis,"output","res",c(0,1))
fis <- addmf(fis,"output",1,"white","trimf",c(0.3,1,1))
fis <- addmf(fis,"output",1,"black","trimf",c(0,0,0.7))
fis <- addrule(fis,c(1,1,1,1,1))
fis <- addrule(fis,c(-1,-1,2,1,2))
a <- igrey
for(i in 1:length(gr$x[,1]))
{
a[i,]=evalfis(cbind(gr$x[i,],gr$y[i,]),fis)
print(i)
}
aa <- a<0.73
label <- bwlabel(fillHull(aa))
layout(t(1:3))
plot(Image(irgb))
plot(Image(aa))
plot(Image(colorLabels(label)))
irgb <- load.example(coins)
irgb <- load.example("coins")
igrey <- grayscale(irgb)
gr <- imgradient(igrey)
fis <- newfis("EdgeDetector")
fis <- addvar(fis,"input","gr$x",c(-1,1))
fis <- addvar(fis,"input","gr$y",c(-1,1))
fis <- addmf(fis,"input",2,"gaussy","gaussmf",c(0.1,0))
fis <- addmf(fis,"input",1,"gaussx","gaussmf",c(0.1,0))
fis <- addvar(fis,"output","res",c(0,1))
fis <- addmf(fis,"output",1,"white","trimf",c(0.3,1,1))
fis <- addmf(fis,"output",1,"black","trimf",c(0,0,0.7))
fis <- addrule(fis,c(1,1,1,1,1))
fis <- addrule(fis,c(-1,-1,2,1,2))
a <- igrey
for(i in 1:length(gr$x[,1]))
{
a[i,]=evalfis(cbind(gr$x[i,],gr$y[i,]),fis)
print(i)
}
aa <- a<0.73
label <- bwlabel(fillHull(aa))
layout(t(1:3))
plot(Image(irgb))
plot(Image(aa))
plot(Image(colorLabels(label)))
writeImage(Image(aa),"FuzzyEdge.jpg")
writeImage(Image(colorLabels(label)),"Segmented Output.jpg")
library(imager)
library(FuzzyR)
library(EBImage)
showGUI(fis)
layout(t(1:3))
plot(Image(irgb))
plot(Image(aa))
plot(Image(colorLabels(label)))
showGUI(fis)
library(FuzzyR)
showGUI(fis)
library(rsconnect)
deployApp("GUI/",appName = "fuzzy")
deployApp("GUI",appName = "fuzzy")
options(repos = BiocInstaller::biocinstallRepos())
getOption("repos")
deployApp("GUI",appName = "fuzzy")
shiny::runApp('GUI')
runApp('GUI')
runApp('GUI')
showGUI(fis)
fis <- newfis("EdgeDetector")
fis <- addvar(fis,"input","gradient-x",c(-1,1))
fis <- addvar(fis,"input","gradient-y",c(-1,1))
fis <- addmf(fis,"input",2,"gauss-y","gaussmf",c(0.1,0))
fis <- addmf(fis,"input",1,"gauss-x","gaussmf",c(0.1,0))
fis <- addvar(fis,"output","res",c(0,1))
fis <- addmf(fis,"output",1,"white","trimf",c(0.3,1,1))
fis <- addmf(fis,"output",1,"black","trimf",c(0,0,0.7))
fis <- addrule(fis,c(1,1,1,1,1))
fis <- addrule(fis,c(-1,-1,2,1,2))
showGUI(fis)
plot(evalfis(c(0.2,0.2),fis))
fis <- newfis("EdgeDetector",fisType = "tsk")
fis
fis <- newfis("EdgeDetector",fisType = "tsks")
fis <- newfis("EdgeDetector",fisType = 2)
fis
fis <- newfis("EdgeDetector")
fis <- addvar(fis,"input","gradient-x",c(-1,1))
fis <- addvar(fis,"input","gradient-y",c(-1,1))
fis <- addmf(fis,"input",1,"gauss-x","gaussmf",c(0.1,0))
fis <- addmf(fis,"input",2,"gauss-y","gaussmf",c(0.1,0))
fis <- addmf(fis,"input",2,"gauss-y","gaussmf",c(0.5,0))
fis$input$1
fis$input
fis$input$namw
fis$input$name
showGUI(fis)
runApp('GUI')
deployApp("GUI",appName = "fuzzy")
runApp('GUI')
deployApp("GUI",appName = "fuzzy")
deployApp("GUI",appName = "fuzzy")
fis <- newfis("EdgeDetector")
fis <- addvar(fis,"input","gradient-x",c(-1,1))
fis <- addvar(fis,"input","gradient-y",c(-1,1))
fis <- addmf(fis,"input",1,"gauss-x","gaussmf",c(0.1,0))
fis <- addmf(fis,"input",2,"gauss-y","gaussmf",c(0.1,0))
fis$input[[5]]
fis$input[5]
fis$input
fis$input[[2]]$mf[[1]]
fis$input[[2]]$mf[[1]]$params
fis$input[[2]]$mf[[1]]$params[0]
fis$input[[2]]$mf[[1]]$params[1]
fis$input[[1]]$mf[[1]]$params
fis <- addvar(fis,"input","gradient-x",c(-1,1))
fis <- newfis("EdgeDetector")
fis <- addvar(fis,"input","gradient-x",c(-1,1))
fis <- addvar(fis,"input","gradient-y",c(-1,1))
fis <- addmf(fis,"input",1,"gauss-x","gaussmf",c(0.3,0))
fis <- addmf(fis,"input",2,"gauss-y","gaussmf",c(0.5,0))
fis$input[[1]]$mf[[1]]$params
fis$input[[2]]$mf[[1]]$params[1]
runApp('GUI')
fis <- addvar(fis,"output","res",c(0,1))
fis <- newfis("EdgeDetector")
fis <- addvar(fis,"input","gradient-x",c(-1,1))
fis <- addvar(fis,"input","gradient-y",c(-1,1))
fis <- addmf(fis,"input",1,"gauss-x","gaussmf",c(0.3,0))
fis <- addmf(fis,"input",2,"gauss-y","gaussmf",c(0.5,0))
fis <- addvar(fis,"output","res",c(0,1))
fis <- addmf(fis,"output",1,"white","trimf",c(0.3,1,1))
fis <- addmf(fis,"output",1,"black","trimf",c(0,0,0.7))
fis$output[[1]]$mf[[1]]$params
fis$output[[1]]$mf[[2]]$params
runApp('GUI')
deployApp("GUI",appName = "fuzzy")
irgb <- load.example("coins")
igrey <- grayscale(irgb)
fis <- newfis("EdgeDetector")
gr <- imgradient(igrey)
fis <- addvar(fis,"input","gradient-x",c(-1,1))
fis <- addvar(fis,"input","gradient-y",c(-1,1))
fis <- addmf(fis,"input",1,"gauss-x","gaussmf",c(0.1,0))
fis <- addmf(fis,"input",2,"gauss-y","gaussmf",c(0.1,0))
fis <- addvar(fis,"output","res",c(0,1))
fis <- addmf(fis,"output",1,"white","trimf",c(0.3,1,1))
fis <- addmf(fis,"output",1,"black","trimf",c(0,0,0.7))
fis <- addrule(fis,c(1,1,1,1,1))
fis <- addrule(fis,c(-1,-1,2,1,2))
evalfunc <- function(a,b)
{
return (evalfis(c(a,b),fis))
}
res <- mapply(evalfunc,gr$x,gr$y)
plot(res)
res <- Image(res,dim(gr$x))
final <- res<0.73
plot(final)
deployApp("GUI",appName = "fuzzy")
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
?<<-
?<-
<<-?
?
<<-
runApp('GUI')
runApp('GUI')
runApp('GUI')
runApp('GUI')
deployApp("GUI",appName = "fuzzy")
shiny::runApp('GUI')
